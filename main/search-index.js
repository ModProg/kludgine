var searchIndex = JSON.parse('{\
"kludgine":{"doc":"Kludgine (Redux)","t":"SSSSSSSSSSSSSSSSSSSSSSSNDDDNSSSSSSSSSSSSSSSSSSSSSSSSSSSSDSSSSSSSSDSSSSSSDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSESSSSSSSSSSSDSSSSDSSSSSSSSSSSSSSIISSSSSDDINSSSSSSLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLALLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQDILLLLLLKLLLLLLLKFLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNGNINGNEENNDDENNNDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMLLLLLLLLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMNNNDDENMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLL","n":["ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CLEAR_BLACK","CLEAR_WHITE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","Center","ClipGuard","CollectedTexture","Color","Custom","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","Frame","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","Graphics","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","Kludgine","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","Origin","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","PreparedGraphic","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","RenderingGraphics","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","ShaderScalable","ShapeSource","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","Texture","TextureCollection","TextureSource","TopLeft","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","abort","alpha","alpha_f32","app","as_ref","as_ref","blue","blue_f32","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clipped_to","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cosmic_text","deref","deref","deref_mut","deref_mut","device","device","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","eq","eq","equivalent","equivalent","figures","fmt","fmt","fmt","fmt","font_family","font_size","font_style","font_system","font_system","font_weight","format","format","from","from","from","from","from","from","from","from","from","from","from","from","from_image","get_hash","green","green_f32","hash","into","into","into","into","into","into","into","into","into","into","into","into_components","into_components","is_valid_bit_pattern","line_height","new","new","new","new","new","new_f32","new_with_data","next_frame","prepare","prepare","prepare","prepare_entire_colection","prepare_partial","prepare_sized","prepare_text","push_image","push_texture","queue","queue","red","red_f32","render","render","render","render_into","reset_text_attributes","resize","scale","scale","set_font_family","set_font_size","set_font_style","set_font_weight","set_line_height","set_text_attributes","set_text_stretch","shapes","size","size","size","size","submit","text","text_attrs","text_stretch","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","Context","Window","WindowBehavior","borrow","borrow_mut","clear_color","downcast","elapsed","from","initialize","into","last_frame_rendered_in","limits","power_preference","prepare","redraw_at","redraw_in","render","run","run","run_with","set_needs_redraw","try_from","try_into","type_id","upcast","Renderer","Rendering","borrow","borrow","borrow_mut","borrow_mut","command_count","default","deref","deref_mut","downcast","downcast","draw_measured_text","draw_shape","draw_text","draw_text_buffer","draw_texture","draw_textured_shape","drop","fmt","from","from","into","into","measure_text","new_frame","render","triangle_count","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vertex_count","Begin","Bevel","Butt","ControlPoint","Cubic","DefaultStrokeWidth","End","Endpoint","Line","LineCap","LineJoin","Miter","MiterClip","Path","PathBuilder","PathEvent","Quadratic","Round","Round","Shape","Square","StrokeOptions","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","close","close","cubic_curve_to","cubic_curve_to","default","default","default_stroke_width","downcast","downcast","downcast","downcast","downcast","downcast","downcast","end_cap","eq","eq","eq","fill","filled_rect","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","into","into","into","into","into","into","into","into_components","into_components","into_components","line_join","line_to","line_to","line_width","miter_limit","new","new_textured","prepare","prepare","quadratic_curve_to","quadratic_curve_to","reset","reset","start_cap","stroke","stroked_rect","to_owned","to_owned","to_owned","to_owned","to_owned","tolerance","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","at","close","ctrl","ctrl1","ctrl2","texture","texture","texture","texture","to","to","to","Center","Custom","FirstBaseline","MeasuredText","PreparedText","TextOrigin","TopLeft","ascent","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref_mut","descent","downcast","downcast","downcast","eq","equivalent","fmt","fmt","fmt","from","from","from","from_lp","from_px","into","into","into","into_components","into_lp","into_px","left","line_height","size","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast"],"q":[[0,"kludgine"],[369,"kludgine::app"],[395,"kludgine::render"],[432,"kludgine::shapes"],[574,"kludgine::shapes::PathEvent"],[586,"kludgine::text"]],"d":["Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","The grapihc should be drawn so that the center of the …","A handle to a clipped <code>RenderingGraphics</code>.","A texture that is contained within a <code>TextureCollection</code>.","A red, green, blue, and alpha color value stored in …","The graphic should be drawn so that the provided relative …","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","A frame that can be rendered.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","A context used to prepare graphics to render.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","A 2d graphics instance.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","The origin of a prepared graphic.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","A graphic that is on the GPU and ready to render.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","A graphics context used to render previously prepared …","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","A unit that is able to be scaled by the GPU shader.","A source of triangle data for a shape.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","An image stored on the GPU.","A collection of multiple textures, managed as a single …","A type that is rendered using a texture.","The graphic should be drawn so that the top-left of the …","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Equivalent to the CSS color keywords of the same name.","Aborts rendering this frame.","Returns the alpha component of this color, range 0-255. A …","Returns the alpha component of this color, range 0.0-1.0. …","Application and Windowing Support.","","","Returns the blue component of this color, range 0-255.","Returns the blue component of this color, range 0.0-1.0.","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>ClipGuard</code> that causes all drawing operations to …","","","","","","","","","","","","","","Returns a reference to the underlying <code>wgpu::Device</code>.","Returns a reference to the underlying <code>wgpu::Device</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the current font family.","Returns the current font size.","Returns the current font style.","Returns a mutable reference to the <code>cosmic_text::FontSystem</code> …","Returns a mutable reference to the <code>cosmic_text::FontSystem</code> …","Returns the current font weight.","Returns the format of the texture backing this collection.","The format of the texture.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a texture from <code>image</code>.","","Returns the green component of this color, range 0-255.","Returns the green component of this color, range 0.0-1.0.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns the current line height.","Returns a new instance of Kludgine with the provided …","Returns a new instance.","Returns a new atlas of the given size and format.","Returns a new color with the provided components.","Creates a new texture of the given size, format, and …","Returns a new color by converting each component from its …","Returns a new texture of the given size, format, and …","Begins rendering a new frame.","Creates a <code>Graphics</code> context for this frame that can be used …","Returns a <code>PreparedGraphic</code> that renders this texture at <code>dest</code>…","Prepares to render this texture at the given location.","Returns a <code>PreparedGraphic</code> for the entire texture.","Prepares the <code>source</code> area to be rendered at <code>dest</code>.","Prepares to render this texture with <code>size</code>. The returned …","Prepares the text layout contained in <code>buffer</code> to be …","Pushes an image to this collection.","Pushes image data to a specific region of the texture.","Returns a reference to the underlying <code>wgpu::Queue</code>.","Returns a reference to the underlying <code>wgpu::Queue</code>.","Returns the red component of this color, range 0-255.","Returns the red component of this color, range 0.0-1.0.","An easy-to-use batching renderer.","Creates a <code>RenderingGraphics</code> context for this frame which …","Renders the prepared graphic at <code>origin</code>, rotating and …","Creates a <code>RenderingGraphics</code> that renders into <code>texture</code> for …","Resets all of the text related properties to their default …","Updates the size and scale of this Kludgine instance.","Returns the current scaling factor for the display this …","Returns the current scaling factor of the display being …","Sets the current font family.","Sets the font size.","Sets the current font style.","Sets the current font weight.","Sets the line height for multi-line layout.","Sets the current text attributes.","Sets the current text stretching.","Types for drawing paths and shapes.","Returns the currently configured size to render.","Returns the current size of the graphics area being …","Returns the current size of the underlying texture.","The size of the texture.","Submits all of the commands for this frame to the GPU.","Types for text rendering.","Returns the current text attributes.","Returns the current text stretch.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of value provided during <code>initialize()</code>.","An open window.","The behavior of a window.","","","Returns the color to clear the window with. If None is …","","Returns the duration that has elapsed since the last frame …","Returns the argument unchanged.","Initialize a new instance from the provided context.","Calls <code>U::from(self)</code>.","Returns the duration taken between when the last frame’s …","Returns the limits to apply for the <code>wgpu</code> instance.","Returns the power preference to initialize <code>wgpu</code> with.","Prepare the window to render.","Sets the window to redraw at the provided time.","Sets the window to redraw after a <code>duration</code>.","Render the contents of the window.","Runs a callback as a single window. Continues to run until …","Launches a Kludgine app using this window as the primary …","Launches a Kludgine app using this window as the primary …","Sets the window to redraw as soon as it can.","","","","","An easy-to-use graphics renderer that batches operations …","An easy-to-use renderer that combines all operations into …","","","","","Returns the number of drawing operations that will be sent …","","","","","","Prepares the text layout contained in <code>buffer</code> to be …","Draws a shape at the origin, rotating and scaling as …","Draws <code>text</code> using the current text settings.","Prepares the text layout contained in <code>buffer</code> to be …","Draws <code>texture</code> at <code>destination</code>, scaling as necessary.","Draws a shape that was created with texture coordinates, …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Measures <code>text</code> using the current text settings.","Clears the currently prepared graphics and returns a new …","Renders the prepared graphics from the last frame.","Returns the number of triangles that are being rendered in …","","","","","","","","","Returns the number of vertexes that compose the drawing …","Begins a path. Must be at the start.","A beveled corner is to be used to join path segments. The …","The stroke for each sub-path does not extend beyond its …","A control point used to create curves.","A cubic curve (two control points).","Controls the default stroke width for a given unit.","Ends the path. Must be the last entry.","A point on a <code>Path</code>.","A straight line segment.","Line cap as defined by the SVG specification.","Line join as defined by the SVG specification.","A sharp corner is to be used to join path segments.","Same as a miter join, but if the miter limit is exceeded, …","A geometric shape defined by a path.","Builds a <code>Path</code>.","An entry in a <code>Path</code>.","A quadratic curve (one control point).","At each end of each sub-path, the shape representing the …","A round corner is to be used to join path segments.","A tesselated shape.","At the end of each sub-path, the shape representing the …","Options for stroking lines on a path.","","","","","","","","","","","","","","","Returns the built path.","Returns the built path.","","","","","","","","","","","Closes the path, connecting the current location to the …","Closes the path, connecting the current location to the …","Create a cubic curve from the current location to <code>end_at</code> …","Create a cubic curve from the current location to <code>end_at</code> …","","","Returns the default width of a line stroked in this unit.","","","","","","","","What cap to use at the end of each sub-path.","","","","Fills this path with <code>color</code>.","Returns a rectangle that is filled solid with <code>color</code>.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","See the SVG specification.","Create a straight line from the current location to <code>end_at</code>.","Create a straight line from the current location to <code>end_at</code>.","The width of the line.","See the SVG specification.","Creates a new path with the initial position <code>start_at</code>.","Creates a new path with the initial position <code>start_at</code>.","Uploads the shape to the GPU, applying <code>texture</code> to the …","Uploads the shape to the GPU.","Create a quadratic curve from the current location to …","Create a quadratic curve from the current location to …","Clears this builder to a state as if it had just been …","Clears this builder to a state as if it had just been …","What cap to use at the start of each sub-path.","Strokes this path with <code>color</code> and <code>options</code>.","Returns a rectangle that has its outline stroked with <code>color</code>…","","","","","","Maximum allowed distance to the path when building an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The location to begin at.","Whether the path should be closed.","The control point for the curve.","The first control point for the curve.","The second control point for the curve.","The texture coordinate for this path event.","The texture coordinate for this path event.","The texture coordinate for this path event.","The texture coordinate for this path event.","The end location of the line.","The end location of the curve.","The end location of the curve.","Render the text such that the center of the extents of the …","Render the text such that the text is offset by a custom …","Render the text such that the leftmost pixel of the …","The dimensions of a measured text block.","Text that is ready to be rendered on the GPU.","Controls the origin of <code>PreparedText</code>.","Render the text such that the top-left of the first line …","The measurement above the baseline of the text.","","","","","","","","","","","","","","The measurement below the baseline of the text.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The measurement to the leftmost pixel of the text.","The measurement above the baseline of the text.","The total size of the measured text, encompassing all …","","","","","","","","","","","","","",""],"i":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,0,0,0,15,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,0,0,0,15,2,2,2,2,2,2,1,2,2,0,5,5,2,2,23,1,5,8,11,12,13,19,2,22,15,23,1,5,8,11,12,13,19,2,22,15,8,12,13,2,15,12,13,2,15,0,5,11,5,11,5,8,23,1,5,8,11,12,13,19,2,22,15,1,11,13,2,15,2,15,0,19,2,22,15,23,23,23,23,5,23,12,22,23,1,5,8,11,12,13,19,2,2,22,15,22,2,2,2,2,23,1,5,8,11,12,13,19,2,22,15,2,15,2,23,23,5,12,2,22,2,22,23,1,13,22,12,22,22,5,12,12,5,8,2,2,0,1,19,1,23,23,23,8,23,23,23,23,23,23,23,0,23,8,12,22,1,0,23,23,12,13,2,15,23,1,5,8,11,12,13,19,2,22,15,23,1,5,8,11,12,13,19,2,22,15,23,1,5,8,11,12,13,19,2,22,15,23,1,5,8,11,12,13,19,2,22,15,98,0,0,69,69,98,69,69,69,98,69,69,98,98,98,69,69,98,0,98,98,69,69,69,69,69,0,0,78,80,78,80,78,80,78,78,78,80,78,78,78,78,78,78,78,80,78,80,78,80,78,80,80,78,78,80,78,80,78,80,78,80,78,89,91,90,0,89,0,89,0,89,0,0,91,91,0,0,0,89,90,91,0,90,0,87,95,83,89,90,88,91,87,95,83,89,90,88,91,87,87,83,89,90,88,91,83,89,90,88,91,87,87,87,87,95,88,94,87,95,83,89,90,88,91,95,83,90,91,88,83,83,89,90,88,91,87,87,95,83,89,90,88,91,88,87,95,83,89,90,88,91,89,90,91,95,87,87,95,95,87,87,83,83,87,87,87,87,95,88,83,83,89,90,88,91,95,87,95,83,89,90,88,91,87,95,83,89,90,88,91,87,95,83,89,90,88,91,87,95,83,89,90,88,91,99,100,101,102,102,99,103,101,102,103,101,102,50,50,50,0,0,0,50,82,51,50,82,51,50,82,50,82,50,82,50,51,51,82,51,50,82,50,50,51,50,82,51,50,82,50,50,51,50,82,50,50,50,82,82,82,50,82,51,50,82,51,50,82,51,50,82,51,50,82],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[2,3],[2,4],0,[5,6],[5,7],[2,3],[2,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[8,[10,[9]]],11],[12,12],[13,13],[2,2],[[[15,[14]]],[[15,[14]]]],[[]],[[]],[[]],[[]],0,[5],[11],[5],[11],[5,7],[8,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[11],[13],[[2,2],16],[[[15,[17]],[15,[17]]],16],[[],16],[[],16],0,[[[19,[18]],20],21],[[2,20],21],[[22,20],21],[[[15,[18]],20],21],[23,24],[23,25],[23,26],[23,27],[5,27],[23,28],[12,29],[22,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30,2],[[]],[[]],[[]],[[31,5],22],[[[0,[32,33]],34],35],[2,3],[2,4],[[2,36]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[23,25],[[7,6,29,[37,[9]],4],23],[[23,7,6],5],[[[37,[9]],29,5],12],[[3,3,3,3],2],[[5,[37,[9]],29,38],22],[[4,4,4,4],2],[[5,[37,[9]],29,38],22],[23,1],[[1,7,6],5],[[13,[10,[[0,[39,40,[42,[41]],43,[44,[41]],45,46,18]]]],5],[[19,[[0,[39,40,[42,[41]],43,[44,[41]],45,46,18]]]]]],[[22,[10,[[0,[39,40,[42,[41]],43,[44,[41]],45,46,18]]]],5],[[19,[[0,[39,40,[42,[41]],43,[44,[41]],45,46,18]]]]]],[[12,[10,[[0,[39,40,[42,[41]],43,[44,[41]],45,46,18]]]],5],[[19,[[0,[39,40,[42,[41]],43,[44,[41]],45,46,18]]]]]],[[22,[10,[9]],[10,[[0,[39,40,[42,[41]],43,[44,[41]],45,46,18]]]],5],[[19,[[0,[39,40,[42,[41]],43,[44,[41]],45,46,18]]]]]],[[22,[15,[[0,[39,40,[42,[41]],43,45,[44,[41]],46,18,47]]]],[37,[[0,[39,40,[42,[41]],43,45,[44,[41]],46,18,47]]]],5],[[19,[[0,[39,40,[42,[41]],43,45,[44,[41]],46,18,47]]]]]],[[5,48,2,[50,[49]]],51],[[12,31,5],13],[[12,52,[37,[9]],6],13],[5,6],[8,6],[2,3],[2,4],0,[[1,53,7,6],8],[[[19,[[0,[54,46,47,55,56]]]],[57,[[0,[54,46,47,55,56]]]],[58,[4]],[58,[59]],8]],[[1,22,[60,[2]],7,6],8],[23],[[23,[37,[9]],4,6]],[23,61],[8,61],[[23,62]],[[23,63]],[[23,26]],[[23,28]],[[23,63]],[[23,64]],[[23,65]],0,[23,[[37,[9]]]],[8,[[37,[9]]]],[12,[[37,[9]]]],[22,[[37,[9]]]],[[1,6],[[58,[66]]]],0,[23,64],[23,65],[[]],[[]],[[]],[[]],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],58],[[],58],[[],58],[[],58],[[],58],[[],58],[[],58],[[],58],[[],58],[[],58],[[],58],0,0,0,[[]],[[]],[[],[[58,[2]]]],[[]],[69,70],[[]],[[69,5]],[[]],[69,70],[71,71],[[],72],[[69,5]],[[69,73]],[[69,70]],[[69,8],16],[[[0,[74,75,76]]],77],[[],77],[[],77],[69],[[],67],[[],67],[[],68],[[],58],0,0,[[]],[[]],[[]],[[]],[78,79],[[],80],[78],[78],[[]],[[]],[[78,[82,[[0,[63,46,43,81,39,18]]]],[50,[[0,[63,46,43,81,39,18]]]],[57,[[0,[63,46,43,81,39,18]]]],[58,[59]],[58,[4]]]],[[78,[83,[[0,[56,55,54,46]]]],[57,[[0,[56,55,54,46]]]],[58,[59]],[58,[4]]]],[[78,84,[50,[[0,[63,46,18]]]],[57,[[0,[63,46,18]]]],[58,[59]],[58,[4]]]],[[78,48,2,[50,[49]],[57,[[0,[63,46,18]]]],[58,[59]],[58,[4]]]],[[78,85,[10,[[0,[47,40,39,45,56,46,56,55,54,46]]]]]],[[78,[86,[[0,[56,55,54,46]]]],85,[57,[[0,[56,55,54,46]]]],[58,[59]],[58,[4]]]],[78],[[80,20],21],[[]],[[]],[[]],[[]],[[78,84,2],[[82,[[0,[63,81,46,18]]]]]],[[80,5],78],[[80,8]],[78,79],[[],67],[[],67],[[],67],[[],67],[[],68],[[],68],[[],58],[[],58],[78,79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[87,[46]]],[[88,[46]]]],[[[87,[46]]],[[88,[46]]]],[[[83,[14]]],[[83,[14]]]],[[[89,[14]]],[[89,[14]]]],[90,90],[[[88,[14]]],[[88,[14]]]],[91,91],[[]],[[]],[[]],[[]],[[]],[[[87,[46]]],[[88,[46]]]],[[[87,[46]]],[[88,[46]]]],[[[87,[46]],[92,[46]],[92,[46]],[93,[46]]],[[87,[46]]]],[[[87,[46]],[92,[46]],[92,[46]],[93,[46]],[57,[9]]],[[87,[46]]]],[[],[[95,[94]]]],[[],[[88,[47]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[83,[17]],[83,[17]]],16],[[90,90],16],[[91,91],16],[[[88,[[0,[40,46]]]],2],[[83,[[0,[40,46]]]]]],[[[10,[[0,[39,45,40,46]]]],2],[[83,[[0,[39,45,40,46]]]]]],[[[83,[18]],20],21],[[[89,[18]],20],21],[[90,20],[[67,[96]]]],[[[88,[18]],20],21],[[91,20],[[67,[96]]]],[[]],[[[88,[47]]],[[87,[47]]]],[[]],[[]],[[]],[[]],[[]],[[]],[97,88],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[87,[46]],[93,[46]],[57,[9]]],[[87,[46]]]],[[[87,[46]],[93,[46]]],[[87,[46]]]],0,0,[[[93,[46]]],[[87,[46]]]],[[[93,[46]],[57,[9]]],[[87,[46]]]],[[[83,[46]],85,5],[[19,[46]]]],[[[83,[46]],5],[[19,[46]]]],[[[87,[46]],[92,[46]],[93,[46]]],[[87,[46]]]],[[[87,[46]],[92,[46]],[93,[46]],[57,[9]]],[[87,[46]]]],[[[87,[46]],[93,[46]],[57,[9]]]],[[[87,[46]],[93,[46]]]],0,[[[88,[[0,[40,46]]]],2,[95,[[0,[40,46]]]]],[[83,[[0,[40,46]]]]]],[[[10,[[0,[39,45,40,46]]]],2,[95,[[0,[39,45,40,46]]]]],[[83,[[0,[39,45,40,46]]]]]],[[]],[[]],[[]],[[]],[[]],0,[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],58],[[],58],[[],58],[[],58],[[],58],[[],58],[[],58],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[14]]],[[50,[14]]]],[[[82,[14]]],[[82,[14]]]],[[]],[[]],[[],50],[51],[51],0,[[]],[[]],[[]],[[[50,[17]],[50,[17]]],16],[[],16],[[51,20],21],[[[50,[18]],20],21],[[[82,[18]],20],21],[[]],[[]],[[]],[61,[[50,[63]]]],[61,[[50,[63]]]],[[]],[[]],[[]],[[]],[[[50,[63]],61]],[[[50,[63]],61]],0,0,0,[[]],[[]],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],68],[[],68],[[],68],[[],58],[[],58],[[],58]],"c":[],"p":[[3,"Frame"],[3,"Color"],[15,"u8"],[15,"f32"],[3,"Graphics"],[3,"Queue"],[3,"Device"],[3,"RenderingGraphics"],[3,"UPx"],[3,"Rect"],[3,"ClipGuard"],[3,"TextureCollection"],[3,"CollectedTexture"],[8,"Clone"],[4,"Origin"],[15,"bool"],[8,"PartialEq"],[8,"Debug"],[3,"PreparedGraphic"],[3,"Formatter"],[6,"Result"],[3,"Texture"],[3,"Kludgine"],[4,"Family"],[3,"Lp"],[4,"Style"],[3,"FontSystem"],[3,"Weight"],[4,"TextureFormat"],[3,"Color"],[4,"DynamicImage"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[8,"Hasher"],[3,"Size"],[3,"TextureUsages"],[8,"Add"],[8,"FloatConversion"],[15,"i32"],[8,"Div"],[8,"Neg"],[8,"From"],[8,"Ord"],[8,"Copy"],[8,"Default"],[3,"Buffer"],[3,"Px"],[4,"TextOrigin"],[3,"PreparedText"],[3,"ImageDataLayout"],[3,"RenderPassDescriptor"],[8,"IntoSigned"],[8,"ShaderScalable"],[8,"IsZero"],[3,"Point"],[4,"Option"],[3,"Angle"],[4,"LoadOp"],[3,"Fraction"],[4,"FamilyOwned"],[8,"ScreenScale"],[3,"Attrs"],[4,"Width"],[3,"SubmissionIndex"],[4,"Result"],[3,"TypeId"],[3,"Window"],[3,"Duration"],[3,"Limits"],[4,"PowerPreference"],[3,"Instant"],[8,"FnMut"],[8,"Send"],[8,"UnwindSafe"],[15,"never"],[3,"Renderer"],[15,"usize"],[3,"Rendering"],[8,"Sub"],[3,"MeasuredText"],[3,"Shape"],[15,"str"],[8,"TextureSource"],[8,"ShapeSource"],[3,"PathBuilder"],[3,"Path"],[4,"PathEvent"],[4,"LineCap"],[4,"LineJoin"],[6,"ControlPoint"],[6,"Endpoint"],[8,"DefaultStrokeWidth"],[3,"StrokeOptions"],[3,"Error"],[8,"IntoIterator"],[8,"WindowBehavior"],[13,"Begin"],[13,"End"],[13,"Quadratic"],[13,"Cubic"],[13,"Line"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
